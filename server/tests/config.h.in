/**
 * @file config.h
 * @author Michal Vasko <mvasko@cesnet.cz>
 * @brief cmocka tests configuration header.
 *
 * Copyright (c) 2016 CESNET, z.s.p.o.
 *
 * This source code is licensed under BSD 3-Clause License (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://opensource.org/licenses/BSD-3-Clause
 */

#define TESTS_DIR "@CMAKE_SOURCE_DIR@/tests"

#include <sysrepo.h>
#include <nc_server.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>

/* taken from libnetconf2 session_p.h private header */

struct nc_session {
    int status;            /**< status of the session */
    NC_SESSION_TERM_REASON term_reason; /**< reason of termination, if status is NC_STATUS_INVALID */
    uint32_t killed_by;          /**< session responsible for termination, if term_reason is NC_SESSION_TERM_KILLED */
    int side;                /**< side of the session: client or server */

    /* NETCONF data */
    uint32_t id;                 /**< NETCONF session ID (session-id-type) */
    int version;          /**< NETCONF protocol version */

    /* Transport implementation */
    NC_TRANSPORT_IMPL ti_type;   /**< transport implementation type to select items from ti union */
    pthread_mutex_t *io_lock;    /**< input/output lock, note that in case of libssh TI, it will be shared
                                      with other NETCONF sessions on the same SSH session (but different SSH channel) */

    union {
        struct {
            int in;              /**< input file descriptor */
            int out;             /**< output file descriptor */
        } fd;                    /**< NC_TI_FD transport implementation structure */
#ifdef NC_ENABLED_SSH
        struct {
            void *channel;
            void *session;
            struct nc_session *next; /**< pointer to the next NETCONF session on the same
                                          SSH session, but different SSH channel. If no such session exists, it is NULL.
                                          otherwise there is a ring list of the NETCONF sessions */
        } libssh;
#endif
#ifdef NC_ENABLED_TLS
        SSL *tls;
#endif
    } ti;                          /**< transport implementation data */
    const char *username;
    const char *host;
    uint16_t port;

    /* other */
    struct ly_ctx *ctx;            /**< libyang context of the session */
    void *data;                    /**< arbitrary user data */
    uint8_t flags;                 /**< various flags of the session - TODO combine with status and/or side */

    union {
        struct {
            /* client side only data */
            uint64_t msgid;
            char **cpblts;                 /**< list of server's capabilities on client side */
            struct nc_msg_cont *replies;   /**< queue for RPC replies received instead of notifications */
            struct nc_msg_cont *notifs;    /**< queue for notifications received instead of RPC reply */
            volatile pthread_t *ntf_tid;   /**< running notifications receiving thread */
        } client;
        struct {
            /* server side only data */
            time_t session_start;          /**< real time the session was created */
            time_t last_rpc;               /**< monotonic time (seconds) the last RPC was received on this session */
            int ntf_status;                /**< flag whether the session is subscribed to any stream */

            pthread_mutex_t *rpc_lock;   /**< lock indicating RPC processing, this lock is always locked before io_lock!! */
            pthread_cond_t *rpc_cond;    /**< RPC condition (tied with rpc_lock and rpc_inuse) */
            volatile int *rpc_inuse;     /**< variable indicating whether there is RPC being processed or not (tied with
                                              rpc_cond and rpc_lock) */

            pthread_mutex_t *ch_lock;      /**< Call Home thread lock */
            pthread_cond_t *ch_cond;       /**< Call Home thread condition */

            /* server flags */
#ifdef NC_ENABLED_SSH
            uint16_t ssh_auth_attempts;    /**< number of failed SSH authentication attempts */
#endif
#ifdef NC_ENABLED_TLS
            X509 *client_cert;                /**< TLS client certificate if used for authentication */
#endif
        } server;
    } opts;
};

/* one wrapper for all the tests */
int
__wrap_sr_get_schema(sr_session_ctx_t *session, const char *module_name, const char *revision,
                     const char *submodule_name, sr_schema_format_t format, char **schema_content)
{
    int fd;
    struct stat st;
    (void)session;
    (void)revision;
    (void)submodule_name;

    if (format != SR_SCHEMA_YIN) {
        fail();
    }

    if (!strcmp(module_name, "ietf-netconf-server")) {
        *schema_content = strdup("<module name=\"ietf-netconf-server\" xmlns=\"urn:ietf:params:xml:ns:yang:yin:1\"><namespace uri=\"ns\"/><prefix value=\"pr\"/></module>");
        return SR_ERR_OK;
    }
    if (!strcmp(module_name, "iana-if-type")) {
        fd = open(TESTS_DIR "/files/iana-if-type.yin", O_RDONLY);
    } else if (!strcmp(module_name, "ietf-interfaces")) {
        fd = open(TESTS_DIR "/files/ietf-interfaces.yin", O_RDONLY);
    } else if (!strcmp(module_name, "ietf-ip")) {
        fd = open(TESTS_DIR "/files/ietf-ip.yin", O_RDONLY);
    } else if (!strcmp(module_name, "custom-op")) {
        fd = open(TESTS_DIR "/files/custom-op.yin", O_RDONLY);
    } else if (!strcmp(module_name, "ietf-netconf")) {
        fd = open(TESTS_DIR "/files/ietf-netconf.yin", O_RDONLY);
    } else if (!strcmp(module_name, "ietf-netconf-acm")) {
        fd = open(TESTS_DIR "/files/ietf-netconf-acm.yin", O_RDONLY);
    } else if (!strcmp(module_name, "ietf-netconf-notifications")) {
        fd = open(TESTS_DIR "/files/ietf-netconf-notifications.yin", O_RDONLY);
    } else if (!strcmp(module_name, "notifications")) {
        fd = open(TESTS_DIR "/files/notifications.yin", O_RDONLY);
    } else if (!strcmp(module_name, "nc-notifications")) {
        fd = open(TESTS_DIR "/files/nc-notifications.yin", O_RDONLY);
    } else if (!strcmp(module_name, "test-notif")) {
        fd = open(TESTS_DIR "/files/test-notif.yin", O_RDONLY);
    } else if (!strcmp(module_name, "test-feature-a")) {
        fd = open(TESTS_DIR "/files/test-feature-a.yin", O_RDONLY);
    } else if (!strcmp(module_name, "test-feature-b")) {
        fd = open(TESTS_DIR "/files/test-feature-b.yin", O_RDONLY);
    } else if (!strcmp(module_name, "test-feature-c")) {
        fd = open(TESTS_DIR "/files/test-feature-c.yin", O_RDONLY);
    } else if (!strcmp(module_name, "simplified-melt")) {
        fd = open(TESTS_DIR "/files/simplified-melt.yin", O_RDONLY);
    } else {
        return SR_ERR_NOT_FOUND;
    }

    if (fd < 0) {
        return SR_ERR_INTERNAL;
    }

    assert_int_equal(fstat(fd, &st), 0);

    *schema_content = malloc((st.st_size + 1) * sizeof(char));
    assert_int_equal(read(fd, *schema_content, st.st_size), st.st_size);
    close(fd);
    (*schema_content)[st.st_size] = '\0';

    return SR_ERR_OK;
}
